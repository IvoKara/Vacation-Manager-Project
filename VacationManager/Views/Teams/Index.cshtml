@model Web.Models.Teams.TeamsIndexViewModel
@using Microsoft.AspNetCore.Identity;
@using Data.Entitiy;
@inject SignInManager<User> _signInManager;
@{
    ViewData["Title"] = "Teams";
}

<h1>@ViewData["Title"]</h1>


@{    
    string[] role = { "" };
    try
    {
        var user = await _signInManager.UserManager.FindByNameAsync(User.Identity.Name);
        var tempRole = await _signInManager.UserManager.GetRolesAsync(user);
        role[0] = tempRole[0];
    }
    catch
    {

    }
}

@if (_signInManager.IsSignedIn(User) && role.First() == "CEO" /*&& user != null*/)
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                Team Name
            </th>
            <th>
                Working on Project
            </th>
            <th>
                Developers
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TeamName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WorkingOnProject.ProjectName)
            </td>
            <td>
                @String.Join(", ", item.Developers.Select(u => u.FirstName + " " + u.LastName).ToArray())
            </td>
            @if (_signInManager.IsSignedIn(User) && role.First() == "CEO" /*&& user != null*/)
            {
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                    <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
            }
        </tr>
        }
    </tbody>
</table>
<ul class="pagination d-flex justify-content-center">
    @for (var i = 1; i <= Model.Pager.PagesCount; i++)
    {
        <li class="page-item @(i == Model.Pager.CurrentPage ? "active" : "")">
            <a asp-route-Pager.CurrentPage="@i" class="page-link">@i</a>
        </li>
    }
</ul>